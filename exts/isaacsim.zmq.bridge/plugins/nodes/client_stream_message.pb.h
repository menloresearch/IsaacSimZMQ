// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_stream_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fstream_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fstream_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fstream_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fstream_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fstream_5fmessage_2eproto;
class BBox2D;
struct BBox2DDefaultTypeInternal;
extern BBox2DDefaultTypeInternal _BBox2D_default_instance_;
class BBox2DInfo;
struct BBox2DInfoDefaultTypeInternal;
extern BBox2DInfoDefaultTypeInternal _BBox2DInfo_default_instance_;
class BBox2DInfo_IdToLabelsEntry_DoNotUse;
struct BBox2DInfo_IdToLabelsEntry_DoNotUseDefaultTypeInternal;
extern BBox2DInfo_IdToLabelsEntry_DoNotUseDefaultTypeInternal _BBox2DInfo_IdToLabelsEntry_DoNotUse_default_instance_;
class BBox2DType;
struct BBox2DTypeDefaultTypeInternal;
extern BBox2DTypeDefaultTypeInternal _BBox2DType_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class ClientStreamMessage;
struct ClientStreamMessageDefaultTypeInternal;
extern ClientStreamMessageDefaultTypeInternal _ClientStreamMessage_default_instance_;
class Clock;
struct ClockDefaultTypeInternal;
extern ClockDefaultTypeInternal _Clock_default_instance_;
class Dex31HandJoins;
struct Dex31HandJoinsDefaultTypeInternal;
extern Dex31HandJoinsDefaultTypeInternal _Dex31HandJoins_default_instance_;
class G1ClientStreamMessage;
struct G1ClientStreamMessageDefaultTypeInternal;
extern G1ClientStreamMessageDefaultTypeInternal _G1ClientStreamMessage_default_instance_;
class G1JoinState;
struct G1JoinStateDefaultTypeInternal;
extern G1JoinStateDefaultTypeInternal _G1JoinState_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BBox2D* Arena::CreateMaybeMessage<::BBox2D>(Arena*);
template<> ::BBox2DInfo* Arena::CreateMaybeMessage<::BBox2DInfo>(Arena*);
template<> ::BBox2DInfo_IdToLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::BBox2DInfo_IdToLabelsEntry_DoNotUse>(Arena*);
template<> ::BBox2DType* Arena::CreateMaybeMessage<::BBox2DType>(Arena*);
template<> ::Camera* Arena::CreateMaybeMessage<::Camera>(Arena*);
template<> ::ClientStreamMessage* Arena::CreateMaybeMessage<::ClientStreamMessage>(Arena*);
template<> ::Clock* Arena::CreateMaybeMessage<::Clock>(Arena*);
template<> ::Dex31HandJoins* Arena::CreateMaybeMessage<::Dex31HandJoins>(Arena*);
template<> ::G1ClientStreamMessage* Arena::CreateMaybeMessage<::G1ClientStreamMessage>(Arena*);
template<> ::G1JoinState* Arena::CreateMaybeMessage<::G1JoinState>(Arena*);
template<> ::Vector3* Arena::CreateMaybeMessage<::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Dex31HandJoins final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Dex31HandJoins) */ {
 public:
  inline Dex31HandJoins() : Dex31HandJoins(nullptr) {}
  ~Dex31HandJoins() override;
  explicit constexpr Dex31HandJoins(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dex31HandJoins(const Dex31HandJoins& from);
  Dex31HandJoins(Dex31HandJoins&& from) noexcept
    : Dex31HandJoins() {
    *this = ::std::move(from);
  }

  inline Dex31HandJoins& operator=(const Dex31HandJoins& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dex31HandJoins& operator=(Dex31HandJoins&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dex31HandJoins& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dex31HandJoins* internal_default_instance() {
    return reinterpret_cast<const Dex31HandJoins*>(
               &_Dex31HandJoins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Dex31HandJoins& a, Dex31HandJoins& b) {
    a.Swap(&b);
  }
  inline void Swap(Dex31HandJoins* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dex31HandJoins* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dex31HandJoins* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dex31HandJoins>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dex31HandJoins& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Dex31HandJoins& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dex31HandJoins* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Dex31HandJoins";
  }
  protected:
  explicit Dex31HandJoins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThumb0FieldNumber = 1,
    kThumb1FieldNumber = 2,
    kThumb2FieldNumber = 3,
    kIndex0FieldNumber = 4,
    kIndex1FieldNumber = 5,
    kMiddle0FieldNumber = 6,
    kMiddle1FieldNumber = 7,
  };
  // double thumb_0 = 1;
  void clear_thumb_0();
  double thumb_0() const;
  void set_thumb_0(double value);
  private:
  double _internal_thumb_0() const;
  void _internal_set_thumb_0(double value);
  public:

  // double thumb_1 = 2;
  void clear_thumb_1();
  double thumb_1() const;
  void set_thumb_1(double value);
  private:
  double _internal_thumb_1() const;
  void _internal_set_thumb_1(double value);
  public:

  // double thumb_2 = 3;
  void clear_thumb_2();
  double thumb_2() const;
  void set_thumb_2(double value);
  private:
  double _internal_thumb_2() const;
  void _internal_set_thumb_2(double value);
  public:

  // double index_0 = 4;
  void clear_index_0();
  double index_0() const;
  void set_index_0(double value);
  private:
  double _internal_index_0() const;
  void _internal_set_index_0(double value);
  public:

  // double index_1 = 5;
  void clear_index_1();
  double index_1() const;
  void set_index_1(double value);
  private:
  double _internal_index_1() const;
  void _internal_set_index_1(double value);
  public:

  // double middle_0 = 6;
  void clear_middle_0();
  double middle_0() const;
  void set_middle_0(double value);
  private:
  double _internal_middle_0() const;
  void _internal_set_middle_0(double value);
  public:

  // double middle_1 = 7;
  void clear_middle_1();
  double middle_1() const;
  void set_middle_1(double value);
  private:
  double _internal_middle_1() const;
  void _internal_set_middle_1(double value);
  public:

  // @@protoc_insertion_point(class_scope:Dex31HandJoins)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double thumb_0_;
  double thumb_1_;
  double thumb_2_;
  double index_0_;
  double index_1_;
  double middle_0_;
  double middle_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class G1JoinState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:G1JoinState) */ {
 public:
  inline G1JoinState() : G1JoinState(nullptr) {}
  ~G1JoinState() override;
  explicit constexpr G1JoinState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  G1JoinState(const G1JoinState& from);
  G1JoinState(G1JoinState&& from) noexcept
    : G1JoinState() {
    *this = ::std::move(from);
  }

  inline G1JoinState& operator=(const G1JoinState& from) {
    CopyFrom(from);
    return *this;
  }
  inline G1JoinState& operator=(G1JoinState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const G1JoinState& default_instance() {
    return *internal_default_instance();
  }
  static inline const G1JoinState* internal_default_instance() {
    return reinterpret_cast<const G1JoinState*>(
               &_G1JoinState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(G1JoinState& a, G1JoinState& b) {
    a.Swap(&b);
  }
  inline void Swap(G1JoinState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(G1JoinState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  G1JoinState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<G1JoinState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const G1JoinState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const G1JoinState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(G1JoinState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "G1JoinState";
  }
  protected:
  explicit G1JoinState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftShoulderAngleFieldNumber = 1,
    kRightShoulderAngleFieldNumber = 2,
    kLeftWristAngleFieldNumber = 3,
    kRightWristAngleFieldNumber = 4,
    kLeftHandFieldNumber = 7,
    kRightHandFieldNumber = 8,
    kLeftElbowFieldNumber = 5,
    kRightElbowFieldNumber = 6,
  };
  // .Vector3 left_shoulder_angle = 1;
  bool has_left_shoulder_angle() const;
  private:
  bool _internal_has_left_shoulder_angle() const;
  public:
  void clear_left_shoulder_angle();
  const ::Vector3& left_shoulder_angle() const;
  PROTOBUF_NODISCARD ::Vector3* release_left_shoulder_angle();
  ::Vector3* mutable_left_shoulder_angle();
  void set_allocated_left_shoulder_angle(::Vector3* left_shoulder_angle);
  private:
  const ::Vector3& _internal_left_shoulder_angle() const;
  ::Vector3* _internal_mutable_left_shoulder_angle();
  public:
  void unsafe_arena_set_allocated_left_shoulder_angle(
      ::Vector3* left_shoulder_angle);
  ::Vector3* unsafe_arena_release_left_shoulder_angle();

  // .Vector3 right_shoulder_angle = 2;
  bool has_right_shoulder_angle() const;
  private:
  bool _internal_has_right_shoulder_angle() const;
  public:
  void clear_right_shoulder_angle();
  const ::Vector3& right_shoulder_angle() const;
  PROTOBUF_NODISCARD ::Vector3* release_right_shoulder_angle();
  ::Vector3* mutable_right_shoulder_angle();
  void set_allocated_right_shoulder_angle(::Vector3* right_shoulder_angle);
  private:
  const ::Vector3& _internal_right_shoulder_angle() const;
  ::Vector3* _internal_mutable_right_shoulder_angle();
  public:
  void unsafe_arena_set_allocated_right_shoulder_angle(
      ::Vector3* right_shoulder_angle);
  ::Vector3* unsafe_arena_release_right_shoulder_angle();

  // .Vector3 left_wrist_angle = 3;
  bool has_left_wrist_angle() const;
  private:
  bool _internal_has_left_wrist_angle() const;
  public:
  void clear_left_wrist_angle();
  const ::Vector3& left_wrist_angle() const;
  PROTOBUF_NODISCARD ::Vector3* release_left_wrist_angle();
  ::Vector3* mutable_left_wrist_angle();
  void set_allocated_left_wrist_angle(::Vector3* left_wrist_angle);
  private:
  const ::Vector3& _internal_left_wrist_angle() const;
  ::Vector3* _internal_mutable_left_wrist_angle();
  public:
  void unsafe_arena_set_allocated_left_wrist_angle(
      ::Vector3* left_wrist_angle);
  ::Vector3* unsafe_arena_release_left_wrist_angle();

  // .Vector3 right_wrist_angle = 4;
  bool has_right_wrist_angle() const;
  private:
  bool _internal_has_right_wrist_angle() const;
  public:
  void clear_right_wrist_angle();
  const ::Vector3& right_wrist_angle() const;
  PROTOBUF_NODISCARD ::Vector3* release_right_wrist_angle();
  ::Vector3* mutable_right_wrist_angle();
  void set_allocated_right_wrist_angle(::Vector3* right_wrist_angle);
  private:
  const ::Vector3& _internal_right_wrist_angle() const;
  ::Vector3* _internal_mutable_right_wrist_angle();
  public:
  void unsafe_arena_set_allocated_right_wrist_angle(
      ::Vector3* right_wrist_angle);
  ::Vector3* unsafe_arena_release_right_wrist_angle();

  // .Dex31HandJoins left_hand = 7;
  bool has_left_hand() const;
  private:
  bool _internal_has_left_hand() const;
  public:
  void clear_left_hand();
  const ::Dex31HandJoins& left_hand() const;
  PROTOBUF_NODISCARD ::Dex31HandJoins* release_left_hand();
  ::Dex31HandJoins* mutable_left_hand();
  void set_allocated_left_hand(::Dex31HandJoins* left_hand);
  private:
  const ::Dex31HandJoins& _internal_left_hand() const;
  ::Dex31HandJoins* _internal_mutable_left_hand();
  public:
  void unsafe_arena_set_allocated_left_hand(
      ::Dex31HandJoins* left_hand);
  ::Dex31HandJoins* unsafe_arena_release_left_hand();

  // .Dex31HandJoins right_hand = 8;
  bool has_right_hand() const;
  private:
  bool _internal_has_right_hand() const;
  public:
  void clear_right_hand();
  const ::Dex31HandJoins& right_hand() const;
  PROTOBUF_NODISCARD ::Dex31HandJoins* release_right_hand();
  ::Dex31HandJoins* mutable_right_hand();
  void set_allocated_right_hand(::Dex31HandJoins* right_hand);
  private:
  const ::Dex31HandJoins& _internal_right_hand() const;
  ::Dex31HandJoins* _internal_mutable_right_hand();
  public:
  void unsafe_arena_set_allocated_right_hand(
      ::Dex31HandJoins* right_hand);
  ::Dex31HandJoins* unsafe_arena_release_right_hand();

  // double left_elbow = 5;
  void clear_left_elbow();
  double left_elbow() const;
  void set_left_elbow(double value);
  private:
  double _internal_left_elbow() const;
  void _internal_set_left_elbow(double value);
  public:

  // double right_elbow = 6;
  void clear_right_elbow();
  double right_elbow() const;
  void set_right_elbow(double value);
  private:
  double _internal_right_elbow() const;
  void _internal_set_right_elbow(double value);
  public:

  // @@protoc_insertion_point(class_scope:G1JoinState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* left_shoulder_angle_;
  ::Vector3* right_shoulder_angle_;
  ::Vector3* left_wrist_angle_;
  ::Vector3* right_wrist_angle_;
  ::Dex31HandJoins* left_hand_;
  ::Dex31HandJoins* right_hand_;
  double left_elbow_;
  double right_elbow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class BBox2DType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBox2DType) */ {
 public:
  inline BBox2DType() : BBox2DType(nullptr) {}
  ~BBox2DType() override;
  explicit constexpr BBox2DType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBox2DType(const BBox2DType& from);
  BBox2DType(BBox2DType&& from) noexcept
    : BBox2DType() {
    *this = ::std::move(from);
  }

  inline BBox2DType& operator=(const BBox2DType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox2DType& operator=(BBox2DType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox2DType& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox2DType* internal_default_instance() {
    return reinterpret_cast<const BBox2DType*>(
               &_BBox2DType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BBox2DType& a, BBox2DType& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox2DType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox2DType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox2DType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBox2DType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBox2DType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BBox2DType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox2DType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBox2DType";
  }
  protected:
  explicit BBox2DType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSemanticIdFieldNumber = 1,
    kXMinFieldNumber = 2,
    kYMinFieldNumber = 3,
    kXMaxFieldNumber = 4,
    kYMaxFieldNumber = 5,
    kOcclusionRatioFieldNumber = 6,
  };
  // uint32 semanticId = 1;
  void clear_semanticid();
  uint32_t semanticid() const;
  void set_semanticid(uint32_t value);
  private:
  uint32_t _internal_semanticid() const;
  void _internal_set_semanticid(uint32_t value);
  public:

  // int32 xMin = 2;
  void clear_xmin();
  int32_t xmin() const;
  void set_xmin(int32_t value);
  private:
  int32_t _internal_xmin() const;
  void _internal_set_xmin(int32_t value);
  public:

  // int32 yMin = 3;
  void clear_ymin();
  int32_t ymin() const;
  void set_ymin(int32_t value);
  private:
  int32_t _internal_ymin() const;
  void _internal_set_ymin(int32_t value);
  public:

  // int32 xMax = 4;
  void clear_xmax();
  int32_t xmax() const;
  void set_xmax(int32_t value);
  private:
  int32_t _internal_xmax() const;
  void _internal_set_xmax(int32_t value);
  public:

  // int32 yMax = 5;
  void clear_ymax();
  int32_t ymax() const;
  void set_ymax(int32_t value);
  private:
  int32_t _internal_ymax() const;
  void _internal_set_ymax(int32_t value);
  public:

  // float occlusionRatio = 6;
  void clear_occlusionratio();
  float occlusionratio() const;
  void set_occlusionratio(float value);
  private:
  float _internal_occlusionratio() const;
  void _internal_set_occlusionratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:BBox2DType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t semanticid_;
  int32_t xmin_;
  int32_t ymin_;
  int32_t xmax_;
  int32_t ymax_;
  float occlusionratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class BBox2DInfo_IdToLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BBox2DInfo_IdToLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BBox2DInfo_IdToLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  BBox2DInfo_IdToLabelsEntry_DoNotUse();
  explicit constexpr BBox2DInfo_IdToLabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BBox2DInfo_IdToLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BBox2DInfo_IdToLabelsEntry_DoNotUse& other);
  static const BBox2DInfo_IdToLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BBox2DInfo_IdToLabelsEntry_DoNotUse*>(&_BBox2DInfo_IdToLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BBox2DInfo.IdToLabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BBox2DInfo.IdToLabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BBox2DInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBox2DInfo) */ {
 public:
  inline BBox2DInfo() : BBox2DInfo(nullptr) {}
  ~BBox2DInfo() override;
  explicit constexpr BBox2DInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBox2DInfo(const BBox2DInfo& from);
  BBox2DInfo(BBox2DInfo&& from) noexcept
    : BBox2DInfo() {
    *this = ::std::move(from);
  }

  inline BBox2DInfo& operator=(const BBox2DInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox2DInfo& operator=(BBox2DInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox2DInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox2DInfo* internal_default_instance() {
    return reinterpret_cast<const BBox2DInfo*>(
               &_BBox2DInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BBox2DInfo& a, BBox2DInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox2DInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox2DInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox2DInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBox2DInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBox2DInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BBox2DInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox2DInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBox2DInfo";
  }
  protected:
  explicit BBox2DInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIdToLabelsFieldNumber = 1,
    kBboxIdsFieldNumber = 2,
  };
  // map<string, string> idToLabels = 1;
  int idtolabels_size() const;
  private:
  int _internal_idtolabels_size() const;
  public:
  void clear_idtolabels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_idtolabels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_idtolabels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      idtolabels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_idtolabels();

  // repeated int32 bboxIds = 2;
  int bboxids_size() const;
  private:
  int _internal_bboxids_size() const;
  public:
  void clear_bboxids();
  private:
  int32_t _internal_bboxids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_bboxids() const;
  void _internal_add_bboxids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_bboxids();
  public:
  int32_t bboxids(int index) const;
  void set_bboxids(int index, int32_t value);
  void add_bboxids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      bboxids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_bboxids();

  // @@protoc_insertion_point(class_scope:BBox2DInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BBox2DInfo_IdToLabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> idtolabels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > bboxids_;
  mutable std::atomic<int> _bboxids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class BBox2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBox2D) */ {
 public:
  inline BBox2D() : BBox2D(nullptr) {}
  ~BBox2D() override;
  explicit constexpr BBox2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBox2D(const BBox2D& from);
  BBox2D(BBox2D&& from) noexcept
    : BBox2D() {
    *this = ::std::move(from);
  }

  inline BBox2D& operator=(const BBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox2D& operator=(BBox2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox2D* internal_default_instance() {
    return reinterpret_cast<const BBox2D*>(
               &_BBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BBox2D& a, BBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBox2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBox2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BBox2D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBox2D";
  }
  protected:
  explicit BBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // repeated .BBox2DType data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::BBox2DType* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBox2DType >*
      mutable_data();
  private:
  const ::BBox2DType& _internal_data(int index) const;
  ::BBox2DType* _internal_add_data();
  public:
  const ::BBox2DType& data(int index) const;
  ::BBox2DType* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBox2DType >&
      data() const;

  // .BBox2DInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::BBox2DInfo& info() const;
  PROTOBUF_NODISCARD ::BBox2DInfo* release_info();
  ::BBox2DInfo* mutable_info();
  void set_allocated_info(::BBox2DInfo* info);
  private:
  const ::BBox2DInfo& _internal_info() const;
  ::BBox2DInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::BBox2DInfo* info);
  ::BBox2DInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:BBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBox2DType > data_;
  ::BBox2DInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Clock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Clock) */ {
 public:
  inline Clock() : Clock(nullptr) {}
  ~Clock() override;
  explicit constexpr Clock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Clock(const Clock& from);
  Clock(Clock&& from) noexcept
    : Clock() {
    *this = ::std::move(from);
  }

  inline Clock& operator=(const Clock& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clock& operator=(Clock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Clock& default_instance() {
    return *internal_default_instance();
  }
  static inline const Clock* internal_default_instance() {
    return reinterpret_cast<const Clock*>(
               &_Clock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Clock& a, Clock& b) {
    a.Swap(&b);
  }
  inline void Swap(Clock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Clock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Clock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Clock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Clock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Clock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Clock";
  }
  protected:
  explicit Clock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimDtFieldNumber = 1,
    kSysDtFieldNumber = 2,
    kSimTimeFieldNumber = 3,
    kSysTimeFieldNumber = 4,
  };
  // double sim_dt = 1;
  void clear_sim_dt();
  double sim_dt() const;
  void set_sim_dt(double value);
  private:
  double _internal_sim_dt() const;
  void _internal_set_sim_dt(double value);
  public:

  // double sys_dt = 2;
  void clear_sys_dt();
  double sys_dt() const;
  void set_sys_dt(double value);
  private:
  double _internal_sys_dt() const;
  void _internal_set_sys_dt(double value);
  public:

  // double sim_time = 3;
  void clear_sim_time();
  double sim_time() const;
  void set_sim_time(double value);
  private:
  double _internal_sim_time() const;
  void _internal_set_sim_time(double value);
  public:

  // double sys_time = 4;
  void clear_sys_time();
  double sys_time() const;
  void set_sys_time(double value);
  private:
  double _internal_sys_time() const;
  void _internal_set_sys_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:Clock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double sim_dt_;
  double sys_dt_;
  double sim_time_;
  double sys_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Camera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewMatrixRosFieldNumber = 1,
    kCameraScaleFieldNumber = 2,
    kIntrinsicsMatrixFieldNumber = 3,
  };
  // repeated double view_matrix_ros = 1;
  int view_matrix_ros_size() const;
  private:
  int _internal_view_matrix_ros_size() const;
  public:
  void clear_view_matrix_ros();
  private:
  double _internal_view_matrix_ros(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_view_matrix_ros() const;
  void _internal_add_view_matrix_ros(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_view_matrix_ros();
  public:
  double view_matrix_ros(int index) const;
  void set_view_matrix_ros(int index, double value);
  void add_view_matrix_ros(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      view_matrix_ros() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_view_matrix_ros();

  // repeated double camera_scale = 2;
  int camera_scale_size() const;
  private:
  int _internal_camera_scale_size() const;
  public:
  void clear_camera_scale();
  private:
  double _internal_camera_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_camera_scale() const;
  void _internal_add_camera_scale(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_camera_scale();
  public:
  double camera_scale(int index) const;
  void set_camera_scale(int index, double value);
  void add_camera_scale(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      camera_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_camera_scale();

  // repeated double intrinsics_matrix = 3;
  int intrinsics_matrix_size() const;
  private:
  int _internal_intrinsics_matrix_size() const;
  public:
  void clear_intrinsics_matrix();
  private:
  double _internal_intrinsics_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_intrinsics_matrix() const;
  void _internal_add_intrinsics_matrix(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_intrinsics_matrix();
  public:
  double intrinsics_matrix(int index) const;
  void set_intrinsics_matrix(int index, double value);
  void add_intrinsics_matrix(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      intrinsics_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_intrinsics_matrix();

  // @@protoc_insertion_point(class_scope:Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > view_matrix_ros_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > camera_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > intrinsics_matrix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ClientStreamMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStreamMessage) */ {
 public:
  inline ClientStreamMessage() : ClientStreamMessage(nullptr) {}
  ~ClientStreamMessage() override;
  explicit constexpr ClientStreamMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientStreamMessage(const ClientStreamMessage& from);
  ClientStreamMessage(ClientStreamMessage&& from) noexcept
    : ClientStreamMessage() {
    *this = ::std::move(from);
  }

  inline ClientStreamMessage& operator=(const ClientStreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStreamMessage& operator=(ClientStreamMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientStreamMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientStreamMessage* internal_default_instance() {
    return reinterpret_cast<const ClientStreamMessage*>(
               &_ClientStreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientStreamMessage& a, ClientStreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientStreamMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientStreamMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientStreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientStreamMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientStreamMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientStreamMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStreamMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStreamMessage";
  }
  protected:
  explicit ClientStreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorImageFieldNumber = 4,
    kDepthImageFieldNumber = 5,
    kBbox2DFieldNumber = 1,
    kClockFieldNumber = 2,
    kCameraFieldNumber = 3,
  };
  // bytes color_image = 4;
  void clear_color_image();
  const std::string& color_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_image();
  PROTOBUF_NODISCARD std::string* release_color_image();
  void set_allocated_color_image(std::string* color_image);
  private:
  const std::string& _internal_color_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_image(const std::string& value);
  std::string* _internal_mutable_color_image();
  public:

  // bytes depth_image = 5;
  void clear_depth_image();
  const std::string& depth_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_depth_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_depth_image();
  PROTOBUF_NODISCARD std::string* release_depth_image();
  void set_allocated_depth_image(std::string* depth_image);
  private:
  const std::string& _internal_depth_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depth_image(const std::string& value);
  std::string* _internal_mutable_depth_image();
  public:

  // .BBox2D bbox2d = 1;
  bool has_bbox2d() const;
  private:
  bool _internal_has_bbox2d() const;
  public:
  void clear_bbox2d();
  const ::BBox2D& bbox2d() const;
  PROTOBUF_NODISCARD ::BBox2D* release_bbox2d();
  ::BBox2D* mutable_bbox2d();
  void set_allocated_bbox2d(::BBox2D* bbox2d);
  private:
  const ::BBox2D& _internal_bbox2d() const;
  ::BBox2D* _internal_mutable_bbox2d();
  public:
  void unsafe_arena_set_allocated_bbox2d(
      ::BBox2D* bbox2d);
  ::BBox2D* unsafe_arena_release_bbox2d();

  // .Clock clock = 2;
  bool has_clock() const;
  private:
  bool _internal_has_clock() const;
  public:
  void clear_clock();
  const ::Clock& clock() const;
  PROTOBUF_NODISCARD ::Clock* release_clock();
  ::Clock* mutable_clock();
  void set_allocated_clock(::Clock* clock);
  private:
  const ::Clock& _internal_clock() const;
  ::Clock* _internal_mutable_clock();
  public:
  void unsafe_arena_set_allocated_clock(
      ::Clock* clock);
  ::Clock* unsafe_arena_release_clock();

  // .Camera camera = 3;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::Camera& camera() const;
  PROTOBUF_NODISCARD ::Camera* release_camera();
  ::Camera* mutable_camera();
  void set_allocated_camera(::Camera* camera);
  private:
  const ::Camera& _internal_camera() const;
  ::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::Camera* camera);
  ::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:ClientStreamMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depth_image_;
  ::BBox2D* bbox2d_;
  ::Clock* clock_;
  ::Camera* camera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class G1ClientStreamMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:G1ClientStreamMessage) */ {
 public:
  inline G1ClientStreamMessage() : G1ClientStreamMessage(nullptr) {}
  ~G1ClientStreamMessage() override;
  explicit constexpr G1ClientStreamMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  G1ClientStreamMessage(const G1ClientStreamMessage& from);
  G1ClientStreamMessage(G1ClientStreamMessage&& from) noexcept
    : G1ClientStreamMessage() {
    *this = ::std::move(from);
  }

  inline G1ClientStreamMessage& operator=(const G1ClientStreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline G1ClientStreamMessage& operator=(G1ClientStreamMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const G1ClientStreamMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const G1ClientStreamMessage* internal_default_instance() {
    return reinterpret_cast<const G1ClientStreamMessage*>(
               &_G1ClientStreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(G1ClientStreamMessage& a, G1ClientStreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(G1ClientStreamMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(G1ClientStreamMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  G1ClientStreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<G1ClientStreamMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const G1ClientStreamMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const G1ClientStreamMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(G1ClientStreamMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "G1ClientStreamMessage";
  }
  protected:
  explicit G1ClientStreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorImageFieldNumber = 4,
    kDepthImageFieldNumber = 5,
    kBbox2DFieldNumber = 1,
    kClockFieldNumber = 2,
    kCameraFieldNumber = 3,
    kJoinStateFieldNumber = 6,
  };
  // bytes color_image = 4;
  void clear_color_image();
  const std::string& color_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_image();
  PROTOBUF_NODISCARD std::string* release_color_image();
  void set_allocated_color_image(std::string* color_image);
  private:
  const std::string& _internal_color_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_image(const std::string& value);
  std::string* _internal_mutable_color_image();
  public:

  // bytes depth_image = 5;
  void clear_depth_image();
  const std::string& depth_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_depth_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_depth_image();
  PROTOBUF_NODISCARD std::string* release_depth_image();
  void set_allocated_depth_image(std::string* depth_image);
  private:
  const std::string& _internal_depth_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depth_image(const std::string& value);
  std::string* _internal_mutable_depth_image();
  public:

  // .BBox2D bbox2d = 1;
  bool has_bbox2d() const;
  private:
  bool _internal_has_bbox2d() const;
  public:
  void clear_bbox2d();
  const ::BBox2D& bbox2d() const;
  PROTOBUF_NODISCARD ::BBox2D* release_bbox2d();
  ::BBox2D* mutable_bbox2d();
  void set_allocated_bbox2d(::BBox2D* bbox2d);
  private:
  const ::BBox2D& _internal_bbox2d() const;
  ::BBox2D* _internal_mutable_bbox2d();
  public:
  void unsafe_arena_set_allocated_bbox2d(
      ::BBox2D* bbox2d);
  ::BBox2D* unsafe_arena_release_bbox2d();

  // .Clock clock = 2;
  bool has_clock() const;
  private:
  bool _internal_has_clock() const;
  public:
  void clear_clock();
  const ::Clock& clock() const;
  PROTOBUF_NODISCARD ::Clock* release_clock();
  ::Clock* mutable_clock();
  void set_allocated_clock(::Clock* clock);
  private:
  const ::Clock& _internal_clock() const;
  ::Clock* _internal_mutable_clock();
  public:
  void unsafe_arena_set_allocated_clock(
      ::Clock* clock);
  ::Clock* unsafe_arena_release_clock();

  // .Camera camera = 3;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::Camera& camera() const;
  PROTOBUF_NODISCARD ::Camera* release_camera();
  ::Camera* mutable_camera();
  void set_allocated_camera(::Camera* camera);
  private:
  const ::Camera& _internal_camera() const;
  ::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::Camera* camera);
  ::Camera* unsafe_arena_release_camera();

  // .G1JoinState join_state = 6;
  bool has_join_state() const;
  private:
  bool _internal_has_join_state() const;
  public:
  void clear_join_state();
  const ::G1JoinState& join_state() const;
  PROTOBUF_NODISCARD ::G1JoinState* release_join_state();
  ::G1JoinState* mutable_join_state();
  void set_allocated_join_state(::G1JoinState* join_state);
  private:
  const ::G1JoinState& _internal_join_state() const;
  ::G1JoinState* _internal_mutable_join_state();
  public:
  void unsafe_arena_set_allocated_join_state(
      ::G1JoinState* join_state);
  ::G1JoinState* unsafe_arena_release_join_state();

  // @@protoc_insertion_point(class_scope:G1ClientStreamMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depth_image_;
  ::BBox2D* bbox2d_;
  ::Clock* clock_;
  ::Camera* camera_;
  ::G1JoinState* join_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstream_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3.z)
}

// -------------------------------------------------------------------

// Dex31HandJoins

// double thumb_0 = 1;
inline void Dex31HandJoins::clear_thumb_0() {
  thumb_0_ = 0;
}
inline double Dex31HandJoins::_internal_thumb_0() const {
  return thumb_0_;
}
inline double Dex31HandJoins::thumb_0() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.thumb_0)
  return _internal_thumb_0();
}
inline void Dex31HandJoins::_internal_set_thumb_0(double value) {
  
  thumb_0_ = value;
}
inline void Dex31HandJoins::set_thumb_0(double value) {
  _internal_set_thumb_0(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.thumb_0)
}

// double thumb_1 = 2;
inline void Dex31HandJoins::clear_thumb_1() {
  thumb_1_ = 0;
}
inline double Dex31HandJoins::_internal_thumb_1() const {
  return thumb_1_;
}
inline double Dex31HandJoins::thumb_1() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.thumb_1)
  return _internal_thumb_1();
}
inline void Dex31HandJoins::_internal_set_thumb_1(double value) {
  
  thumb_1_ = value;
}
inline void Dex31HandJoins::set_thumb_1(double value) {
  _internal_set_thumb_1(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.thumb_1)
}

// double thumb_2 = 3;
inline void Dex31HandJoins::clear_thumb_2() {
  thumb_2_ = 0;
}
inline double Dex31HandJoins::_internal_thumb_2() const {
  return thumb_2_;
}
inline double Dex31HandJoins::thumb_2() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.thumb_2)
  return _internal_thumb_2();
}
inline void Dex31HandJoins::_internal_set_thumb_2(double value) {
  
  thumb_2_ = value;
}
inline void Dex31HandJoins::set_thumb_2(double value) {
  _internal_set_thumb_2(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.thumb_2)
}

// double index_0 = 4;
inline void Dex31HandJoins::clear_index_0() {
  index_0_ = 0;
}
inline double Dex31HandJoins::_internal_index_0() const {
  return index_0_;
}
inline double Dex31HandJoins::index_0() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.index_0)
  return _internal_index_0();
}
inline void Dex31HandJoins::_internal_set_index_0(double value) {
  
  index_0_ = value;
}
inline void Dex31HandJoins::set_index_0(double value) {
  _internal_set_index_0(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.index_0)
}

// double index_1 = 5;
inline void Dex31HandJoins::clear_index_1() {
  index_1_ = 0;
}
inline double Dex31HandJoins::_internal_index_1() const {
  return index_1_;
}
inline double Dex31HandJoins::index_1() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.index_1)
  return _internal_index_1();
}
inline void Dex31HandJoins::_internal_set_index_1(double value) {
  
  index_1_ = value;
}
inline void Dex31HandJoins::set_index_1(double value) {
  _internal_set_index_1(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.index_1)
}

// double middle_0 = 6;
inline void Dex31HandJoins::clear_middle_0() {
  middle_0_ = 0;
}
inline double Dex31HandJoins::_internal_middle_0() const {
  return middle_0_;
}
inline double Dex31HandJoins::middle_0() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.middle_0)
  return _internal_middle_0();
}
inline void Dex31HandJoins::_internal_set_middle_0(double value) {
  
  middle_0_ = value;
}
inline void Dex31HandJoins::set_middle_0(double value) {
  _internal_set_middle_0(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.middle_0)
}

// double middle_1 = 7;
inline void Dex31HandJoins::clear_middle_1() {
  middle_1_ = 0;
}
inline double Dex31HandJoins::_internal_middle_1() const {
  return middle_1_;
}
inline double Dex31HandJoins::middle_1() const {
  // @@protoc_insertion_point(field_get:Dex31HandJoins.middle_1)
  return _internal_middle_1();
}
inline void Dex31HandJoins::_internal_set_middle_1(double value) {
  
  middle_1_ = value;
}
inline void Dex31HandJoins::set_middle_1(double value) {
  _internal_set_middle_1(value);
  // @@protoc_insertion_point(field_set:Dex31HandJoins.middle_1)
}

// -------------------------------------------------------------------

// G1JoinState

// .Vector3 left_shoulder_angle = 1;
inline bool G1JoinState::_internal_has_left_shoulder_angle() const {
  return this != internal_default_instance() && left_shoulder_angle_ != nullptr;
}
inline bool G1JoinState::has_left_shoulder_angle() const {
  return _internal_has_left_shoulder_angle();
}
inline void G1JoinState::clear_left_shoulder_angle() {
  if (GetArenaForAllocation() == nullptr && left_shoulder_angle_ != nullptr) {
    delete left_shoulder_angle_;
  }
  left_shoulder_angle_ = nullptr;
}
inline const ::Vector3& G1JoinState::_internal_left_shoulder_angle() const {
  const ::Vector3* p = left_shoulder_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& G1JoinState::left_shoulder_angle() const {
  // @@protoc_insertion_point(field_get:G1JoinState.left_shoulder_angle)
  return _internal_left_shoulder_angle();
}
inline void G1JoinState::unsafe_arena_set_allocated_left_shoulder_angle(
    ::Vector3* left_shoulder_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_shoulder_angle_);
  }
  left_shoulder_angle_ = left_shoulder_angle;
  if (left_shoulder_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1JoinState.left_shoulder_angle)
}
inline ::Vector3* G1JoinState::release_left_shoulder_angle() {
  
  ::Vector3* temp = left_shoulder_angle_;
  left_shoulder_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* G1JoinState::unsafe_arena_release_left_shoulder_angle() {
  // @@protoc_insertion_point(field_release:G1JoinState.left_shoulder_angle)
  
  ::Vector3* temp = left_shoulder_angle_;
  left_shoulder_angle_ = nullptr;
  return temp;
}
inline ::Vector3* G1JoinState::_internal_mutable_left_shoulder_angle() {
  
  if (left_shoulder_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    left_shoulder_angle_ = p;
  }
  return left_shoulder_angle_;
}
inline ::Vector3* G1JoinState::mutable_left_shoulder_angle() {
  ::Vector3* _msg = _internal_mutable_left_shoulder_angle();
  // @@protoc_insertion_point(field_mutable:G1JoinState.left_shoulder_angle)
  return _msg;
}
inline void G1JoinState::set_allocated_left_shoulder_angle(::Vector3* left_shoulder_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_shoulder_angle_;
  }
  if (left_shoulder_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Vector3>::GetOwningArena(left_shoulder_angle);
    if (message_arena != submessage_arena) {
      left_shoulder_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_shoulder_angle, submessage_arena);
    }
    
  } else {
    
  }
  left_shoulder_angle_ = left_shoulder_angle;
  // @@protoc_insertion_point(field_set_allocated:G1JoinState.left_shoulder_angle)
}

// .Vector3 right_shoulder_angle = 2;
inline bool G1JoinState::_internal_has_right_shoulder_angle() const {
  return this != internal_default_instance() && right_shoulder_angle_ != nullptr;
}
inline bool G1JoinState::has_right_shoulder_angle() const {
  return _internal_has_right_shoulder_angle();
}
inline void G1JoinState::clear_right_shoulder_angle() {
  if (GetArenaForAllocation() == nullptr && right_shoulder_angle_ != nullptr) {
    delete right_shoulder_angle_;
  }
  right_shoulder_angle_ = nullptr;
}
inline const ::Vector3& G1JoinState::_internal_right_shoulder_angle() const {
  const ::Vector3* p = right_shoulder_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& G1JoinState::right_shoulder_angle() const {
  // @@protoc_insertion_point(field_get:G1JoinState.right_shoulder_angle)
  return _internal_right_shoulder_angle();
}
inline void G1JoinState::unsafe_arena_set_allocated_right_shoulder_angle(
    ::Vector3* right_shoulder_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_shoulder_angle_);
  }
  right_shoulder_angle_ = right_shoulder_angle;
  if (right_shoulder_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1JoinState.right_shoulder_angle)
}
inline ::Vector3* G1JoinState::release_right_shoulder_angle() {
  
  ::Vector3* temp = right_shoulder_angle_;
  right_shoulder_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* G1JoinState::unsafe_arena_release_right_shoulder_angle() {
  // @@protoc_insertion_point(field_release:G1JoinState.right_shoulder_angle)
  
  ::Vector3* temp = right_shoulder_angle_;
  right_shoulder_angle_ = nullptr;
  return temp;
}
inline ::Vector3* G1JoinState::_internal_mutable_right_shoulder_angle() {
  
  if (right_shoulder_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    right_shoulder_angle_ = p;
  }
  return right_shoulder_angle_;
}
inline ::Vector3* G1JoinState::mutable_right_shoulder_angle() {
  ::Vector3* _msg = _internal_mutable_right_shoulder_angle();
  // @@protoc_insertion_point(field_mutable:G1JoinState.right_shoulder_angle)
  return _msg;
}
inline void G1JoinState::set_allocated_right_shoulder_angle(::Vector3* right_shoulder_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_shoulder_angle_;
  }
  if (right_shoulder_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Vector3>::GetOwningArena(right_shoulder_angle);
    if (message_arena != submessage_arena) {
      right_shoulder_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_shoulder_angle, submessage_arena);
    }
    
  } else {
    
  }
  right_shoulder_angle_ = right_shoulder_angle;
  // @@protoc_insertion_point(field_set_allocated:G1JoinState.right_shoulder_angle)
}

// .Vector3 left_wrist_angle = 3;
inline bool G1JoinState::_internal_has_left_wrist_angle() const {
  return this != internal_default_instance() && left_wrist_angle_ != nullptr;
}
inline bool G1JoinState::has_left_wrist_angle() const {
  return _internal_has_left_wrist_angle();
}
inline void G1JoinState::clear_left_wrist_angle() {
  if (GetArenaForAllocation() == nullptr && left_wrist_angle_ != nullptr) {
    delete left_wrist_angle_;
  }
  left_wrist_angle_ = nullptr;
}
inline const ::Vector3& G1JoinState::_internal_left_wrist_angle() const {
  const ::Vector3* p = left_wrist_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& G1JoinState::left_wrist_angle() const {
  // @@protoc_insertion_point(field_get:G1JoinState.left_wrist_angle)
  return _internal_left_wrist_angle();
}
inline void G1JoinState::unsafe_arena_set_allocated_left_wrist_angle(
    ::Vector3* left_wrist_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_wrist_angle_);
  }
  left_wrist_angle_ = left_wrist_angle;
  if (left_wrist_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1JoinState.left_wrist_angle)
}
inline ::Vector3* G1JoinState::release_left_wrist_angle() {
  
  ::Vector3* temp = left_wrist_angle_;
  left_wrist_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* G1JoinState::unsafe_arena_release_left_wrist_angle() {
  // @@protoc_insertion_point(field_release:G1JoinState.left_wrist_angle)
  
  ::Vector3* temp = left_wrist_angle_;
  left_wrist_angle_ = nullptr;
  return temp;
}
inline ::Vector3* G1JoinState::_internal_mutable_left_wrist_angle() {
  
  if (left_wrist_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    left_wrist_angle_ = p;
  }
  return left_wrist_angle_;
}
inline ::Vector3* G1JoinState::mutable_left_wrist_angle() {
  ::Vector3* _msg = _internal_mutable_left_wrist_angle();
  // @@protoc_insertion_point(field_mutable:G1JoinState.left_wrist_angle)
  return _msg;
}
inline void G1JoinState::set_allocated_left_wrist_angle(::Vector3* left_wrist_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_wrist_angle_;
  }
  if (left_wrist_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Vector3>::GetOwningArena(left_wrist_angle);
    if (message_arena != submessage_arena) {
      left_wrist_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_wrist_angle, submessage_arena);
    }
    
  } else {
    
  }
  left_wrist_angle_ = left_wrist_angle;
  // @@protoc_insertion_point(field_set_allocated:G1JoinState.left_wrist_angle)
}

// .Vector3 right_wrist_angle = 4;
inline bool G1JoinState::_internal_has_right_wrist_angle() const {
  return this != internal_default_instance() && right_wrist_angle_ != nullptr;
}
inline bool G1JoinState::has_right_wrist_angle() const {
  return _internal_has_right_wrist_angle();
}
inline void G1JoinState::clear_right_wrist_angle() {
  if (GetArenaForAllocation() == nullptr && right_wrist_angle_ != nullptr) {
    delete right_wrist_angle_;
  }
  right_wrist_angle_ = nullptr;
}
inline const ::Vector3& G1JoinState::_internal_right_wrist_angle() const {
  const ::Vector3* p = right_wrist_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& G1JoinState::right_wrist_angle() const {
  // @@protoc_insertion_point(field_get:G1JoinState.right_wrist_angle)
  return _internal_right_wrist_angle();
}
inline void G1JoinState::unsafe_arena_set_allocated_right_wrist_angle(
    ::Vector3* right_wrist_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_wrist_angle_);
  }
  right_wrist_angle_ = right_wrist_angle;
  if (right_wrist_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1JoinState.right_wrist_angle)
}
inline ::Vector3* G1JoinState::release_right_wrist_angle() {
  
  ::Vector3* temp = right_wrist_angle_;
  right_wrist_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* G1JoinState::unsafe_arena_release_right_wrist_angle() {
  // @@protoc_insertion_point(field_release:G1JoinState.right_wrist_angle)
  
  ::Vector3* temp = right_wrist_angle_;
  right_wrist_angle_ = nullptr;
  return temp;
}
inline ::Vector3* G1JoinState::_internal_mutable_right_wrist_angle() {
  
  if (right_wrist_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    right_wrist_angle_ = p;
  }
  return right_wrist_angle_;
}
inline ::Vector3* G1JoinState::mutable_right_wrist_angle() {
  ::Vector3* _msg = _internal_mutable_right_wrist_angle();
  // @@protoc_insertion_point(field_mutable:G1JoinState.right_wrist_angle)
  return _msg;
}
inline void G1JoinState::set_allocated_right_wrist_angle(::Vector3* right_wrist_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_wrist_angle_;
  }
  if (right_wrist_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Vector3>::GetOwningArena(right_wrist_angle);
    if (message_arena != submessage_arena) {
      right_wrist_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_wrist_angle, submessage_arena);
    }
    
  } else {
    
  }
  right_wrist_angle_ = right_wrist_angle;
  // @@protoc_insertion_point(field_set_allocated:G1JoinState.right_wrist_angle)
}

// double left_elbow = 5;
inline void G1JoinState::clear_left_elbow() {
  left_elbow_ = 0;
}
inline double G1JoinState::_internal_left_elbow() const {
  return left_elbow_;
}
inline double G1JoinState::left_elbow() const {
  // @@protoc_insertion_point(field_get:G1JoinState.left_elbow)
  return _internal_left_elbow();
}
inline void G1JoinState::_internal_set_left_elbow(double value) {
  
  left_elbow_ = value;
}
inline void G1JoinState::set_left_elbow(double value) {
  _internal_set_left_elbow(value);
  // @@protoc_insertion_point(field_set:G1JoinState.left_elbow)
}

// double right_elbow = 6;
inline void G1JoinState::clear_right_elbow() {
  right_elbow_ = 0;
}
inline double G1JoinState::_internal_right_elbow() const {
  return right_elbow_;
}
inline double G1JoinState::right_elbow() const {
  // @@protoc_insertion_point(field_get:G1JoinState.right_elbow)
  return _internal_right_elbow();
}
inline void G1JoinState::_internal_set_right_elbow(double value) {
  
  right_elbow_ = value;
}
inline void G1JoinState::set_right_elbow(double value) {
  _internal_set_right_elbow(value);
  // @@protoc_insertion_point(field_set:G1JoinState.right_elbow)
}

// .Dex31HandJoins left_hand = 7;
inline bool G1JoinState::_internal_has_left_hand() const {
  return this != internal_default_instance() && left_hand_ != nullptr;
}
inline bool G1JoinState::has_left_hand() const {
  return _internal_has_left_hand();
}
inline void G1JoinState::clear_left_hand() {
  if (GetArenaForAllocation() == nullptr && left_hand_ != nullptr) {
    delete left_hand_;
  }
  left_hand_ = nullptr;
}
inline const ::Dex31HandJoins& G1JoinState::_internal_left_hand() const {
  const ::Dex31HandJoins* p = left_hand_;
  return p != nullptr ? *p : reinterpret_cast<const ::Dex31HandJoins&>(
      ::_Dex31HandJoins_default_instance_);
}
inline const ::Dex31HandJoins& G1JoinState::left_hand() const {
  // @@protoc_insertion_point(field_get:G1JoinState.left_hand)
  return _internal_left_hand();
}
inline void G1JoinState::unsafe_arena_set_allocated_left_hand(
    ::Dex31HandJoins* left_hand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_hand_);
  }
  left_hand_ = left_hand;
  if (left_hand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1JoinState.left_hand)
}
inline ::Dex31HandJoins* G1JoinState::release_left_hand() {
  
  ::Dex31HandJoins* temp = left_hand_;
  left_hand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Dex31HandJoins* G1JoinState::unsafe_arena_release_left_hand() {
  // @@protoc_insertion_point(field_release:G1JoinState.left_hand)
  
  ::Dex31HandJoins* temp = left_hand_;
  left_hand_ = nullptr;
  return temp;
}
inline ::Dex31HandJoins* G1JoinState::_internal_mutable_left_hand() {
  
  if (left_hand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Dex31HandJoins>(GetArenaForAllocation());
    left_hand_ = p;
  }
  return left_hand_;
}
inline ::Dex31HandJoins* G1JoinState::mutable_left_hand() {
  ::Dex31HandJoins* _msg = _internal_mutable_left_hand();
  // @@protoc_insertion_point(field_mutable:G1JoinState.left_hand)
  return _msg;
}
inline void G1JoinState::set_allocated_left_hand(::Dex31HandJoins* left_hand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_hand_;
  }
  if (left_hand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Dex31HandJoins>::GetOwningArena(left_hand);
    if (message_arena != submessage_arena) {
      left_hand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_hand, submessage_arena);
    }
    
  } else {
    
  }
  left_hand_ = left_hand;
  // @@protoc_insertion_point(field_set_allocated:G1JoinState.left_hand)
}

// .Dex31HandJoins right_hand = 8;
inline bool G1JoinState::_internal_has_right_hand() const {
  return this != internal_default_instance() && right_hand_ != nullptr;
}
inline bool G1JoinState::has_right_hand() const {
  return _internal_has_right_hand();
}
inline void G1JoinState::clear_right_hand() {
  if (GetArenaForAllocation() == nullptr && right_hand_ != nullptr) {
    delete right_hand_;
  }
  right_hand_ = nullptr;
}
inline const ::Dex31HandJoins& G1JoinState::_internal_right_hand() const {
  const ::Dex31HandJoins* p = right_hand_;
  return p != nullptr ? *p : reinterpret_cast<const ::Dex31HandJoins&>(
      ::_Dex31HandJoins_default_instance_);
}
inline const ::Dex31HandJoins& G1JoinState::right_hand() const {
  // @@protoc_insertion_point(field_get:G1JoinState.right_hand)
  return _internal_right_hand();
}
inline void G1JoinState::unsafe_arena_set_allocated_right_hand(
    ::Dex31HandJoins* right_hand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_hand_);
  }
  right_hand_ = right_hand;
  if (right_hand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1JoinState.right_hand)
}
inline ::Dex31HandJoins* G1JoinState::release_right_hand() {
  
  ::Dex31HandJoins* temp = right_hand_;
  right_hand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Dex31HandJoins* G1JoinState::unsafe_arena_release_right_hand() {
  // @@protoc_insertion_point(field_release:G1JoinState.right_hand)
  
  ::Dex31HandJoins* temp = right_hand_;
  right_hand_ = nullptr;
  return temp;
}
inline ::Dex31HandJoins* G1JoinState::_internal_mutable_right_hand() {
  
  if (right_hand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Dex31HandJoins>(GetArenaForAllocation());
    right_hand_ = p;
  }
  return right_hand_;
}
inline ::Dex31HandJoins* G1JoinState::mutable_right_hand() {
  ::Dex31HandJoins* _msg = _internal_mutable_right_hand();
  // @@protoc_insertion_point(field_mutable:G1JoinState.right_hand)
  return _msg;
}
inline void G1JoinState::set_allocated_right_hand(::Dex31HandJoins* right_hand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_hand_;
  }
  if (right_hand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Dex31HandJoins>::GetOwningArena(right_hand);
    if (message_arena != submessage_arena) {
      right_hand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_hand, submessage_arena);
    }
    
  } else {
    
  }
  right_hand_ = right_hand;
  // @@protoc_insertion_point(field_set_allocated:G1JoinState.right_hand)
}

// -------------------------------------------------------------------

// BBox2DType

// uint32 semanticId = 1;
inline void BBox2DType::clear_semanticid() {
  semanticid_ = 0u;
}
inline uint32_t BBox2DType::_internal_semanticid() const {
  return semanticid_;
}
inline uint32_t BBox2DType::semanticid() const {
  // @@protoc_insertion_point(field_get:BBox2DType.semanticId)
  return _internal_semanticid();
}
inline void BBox2DType::_internal_set_semanticid(uint32_t value) {
  
  semanticid_ = value;
}
inline void BBox2DType::set_semanticid(uint32_t value) {
  _internal_set_semanticid(value);
  // @@protoc_insertion_point(field_set:BBox2DType.semanticId)
}

// int32 xMin = 2;
inline void BBox2DType::clear_xmin() {
  xmin_ = 0;
}
inline int32_t BBox2DType::_internal_xmin() const {
  return xmin_;
}
inline int32_t BBox2DType::xmin() const {
  // @@protoc_insertion_point(field_get:BBox2DType.xMin)
  return _internal_xmin();
}
inline void BBox2DType::_internal_set_xmin(int32_t value) {
  
  xmin_ = value;
}
inline void BBox2DType::set_xmin(int32_t value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:BBox2DType.xMin)
}

// int32 yMin = 3;
inline void BBox2DType::clear_ymin() {
  ymin_ = 0;
}
inline int32_t BBox2DType::_internal_ymin() const {
  return ymin_;
}
inline int32_t BBox2DType::ymin() const {
  // @@protoc_insertion_point(field_get:BBox2DType.yMin)
  return _internal_ymin();
}
inline void BBox2DType::_internal_set_ymin(int32_t value) {
  
  ymin_ = value;
}
inline void BBox2DType::set_ymin(int32_t value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:BBox2DType.yMin)
}

// int32 xMax = 4;
inline void BBox2DType::clear_xmax() {
  xmax_ = 0;
}
inline int32_t BBox2DType::_internal_xmax() const {
  return xmax_;
}
inline int32_t BBox2DType::xmax() const {
  // @@protoc_insertion_point(field_get:BBox2DType.xMax)
  return _internal_xmax();
}
inline void BBox2DType::_internal_set_xmax(int32_t value) {
  
  xmax_ = value;
}
inline void BBox2DType::set_xmax(int32_t value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:BBox2DType.xMax)
}

// int32 yMax = 5;
inline void BBox2DType::clear_ymax() {
  ymax_ = 0;
}
inline int32_t BBox2DType::_internal_ymax() const {
  return ymax_;
}
inline int32_t BBox2DType::ymax() const {
  // @@protoc_insertion_point(field_get:BBox2DType.yMax)
  return _internal_ymax();
}
inline void BBox2DType::_internal_set_ymax(int32_t value) {
  
  ymax_ = value;
}
inline void BBox2DType::set_ymax(int32_t value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:BBox2DType.yMax)
}

// float occlusionRatio = 6;
inline void BBox2DType::clear_occlusionratio() {
  occlusionratio_ = 0;
}
inline float BBox2DType::_internal_occlusionratio() const {
  return occlusionratio_;
}
inline float BBox2DType::occlusionratio() const {
  // @@protoc_insertion_point(field_get:BBox2DType.occlusionRatio)
  return _internal_occlusionratio();
}
inline void BBox2DType::_internal_set_occlusionratio(float value) {
  
  occlusionratio_ = value;
}
inline void BBox2DType::set_occlusionratio(float value) {
  _internal_set_occlusionratio(value);
  // @@protoc_insertion_point(field_set:BBox2DType.occlusionRatio)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BBox2DInfo

// map<string, string> idToLabels = 1;
inline int BBox2DInfo::_internal_idtolabels_size() const {
  return idtolabels_.size();
}
inline int BBox2DInfo::idtolabels_size() const {
  return _internal_idtolabels_size();
}
inline void BBox2DInfo::clear_idtolabels() {
  idtolabels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BBox2DInfo::_internal_idtolabels() const {
  return idtolabels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BBox2DInfo::idtolabels() const {
  // @@protoc_insertion_point(field_map:BBox2DInfo.idToLabels)
  return _internal_idtolabels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BBox2DInfo::_internal_mutable_idtolabels() {
  return idtolabels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BBox2DInfo::mutable_idtolabels() {
  // @@protoc_insertion_point(field_mutable_map:BBox2DInfo.idToLabels)
  return _internal_mutable_idtolabels();
}

// repeated int32 bboxIds = 2;
inline int BBox2DInfo::_internal_bboxids_size() const {
  return bboxids_.size();
}
inline int BBox2DInfo::bboxids_size() const {
  return _internal_bboxids_size();
}
inline void BBox2DInfo::clear_bboxids() {
  bboxids_.Clear();
}
inline int32_t BBox2DInfo::_internal_bboxids(int index) const {
  return bboxids_.Get(index);
}
inline int32_t BBox2DInfo::bboxids(int index) const {
  // @@protoc_insertion_point(field_get:BBox2DInfo.bboxIds)
  return _internal_bboxids(index);
}
inline void BBox2DInfo::set_bboxids(int index, int32_t value) {
  bboxids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BBox2DInfo.bboxIds)
}
inline void BBox2DInfo::_internal_add_bboxids(int32_t value) {
  bboxids_.Add(value);
}
inline void BBox2DInfo::add_bboxids(int32_t value) {
  _internal_add_bboxids(value);
  // @@protoc_insertion_point(field_add:BBox2DInfo.bboxIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BBox2DInfo::_internal_bboxids() const {
  return bboxids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BBox2DInfo::bboxids() const {
  // @@protoc_insertion_point(field_list:BBox2DInfo.bboxIds)
  return _internal_bboxids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BBox2DInfo::_internal_mutable_bboxids() {
  return &bboxids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BBox2DInfo::mutable_bboxids() {
  // @@protoc_insertion_point(field_mutable_list:BBox2DInfo.bboxIds)
  return _internal_mutable_bboxids();
}

// -------------------------------------------------------------------

// BBox2D

// repeated .BBox2DType data = 1;
inline int BBox2D::_internal_data_size() const {
  return data_.size();
}
inline int BBox2D::data_size() const {
  return _internal_data_size();
}
inline void BBox2D::clear_data() {
  data_.Clear();
}
inline ::BBox2DType* BBox2D::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BBox2D.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBox2DType >*
BBox2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BBox2D.data)
  return &data_;
}
inline const ::BBox2DType& BBox2D::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::BBox2DType& BBox2D::data(int index) const {
  // @@protoc_insertion_point(field_get:BBox2D.data)
  return _internal_data(index);
}
inline ::BBox2DType* BBox2D::_internal_add_data() {
  return data_.Add();
}
inline ::BBox2DType* BBox2D::add_data() {
  ::BBox2DType* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:BBox2D.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBox2DType >&
BBox2D::data() const {
  // @@protoc_insertion_point(field_list:BBox2D.data)
  return data_;
}

// .BBox2DInfo info = 2;
inline bool BBox2D::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool BBox2D::has_info() const {
  return _internal_has_info();
}
inline void BBox2D::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::BBox2DInfo& BBox2D::_internal_info() const {
  const ::BBox2DInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BBox2DInfo&>(
      ::_BBox2DInfo_default_instance_);
}
inline const ::BBox2DInfo& BBox2D::info() const {
  // @@protoc_insertion_point(field_get:BBox2D.info)
  return _internal_info();
}
inline void BBox2D::unsafe_arena_set_allocated_info(
    ::BBox2DInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BBox2D.info)
}
inline ::BBox2DInfo* BBox2D::release_info() {
  
  ::BBox2DInfo* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BBox2DInfo* BBox2D::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:BBox2D.info)
  
  ::BBox2DInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::BBox2DInfo* BBox2D::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BBox2DInfo>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::BBox2DInfo* BBox2D::mutable_info() {
  ::BBox2DInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:BBox2D.info)
  return _msg;
}
inline void BBox2D::set_allocated_info(::BBox2DInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::BBox2DInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:BBox2D.info)
}

// -------------------------------------------------------------------

// Clock

// double sim_dt = 1;
inline void Clock::clear_sim_dt() {
  sim_dt_ = 0;
}
inline double Clock::_internal_sim_dt() const {
  return sim_dt_;
}
inline double Clock::sim_dt() const {
  // @@protoc_insertion_point(field_get:Clock.sim_dt)
  return _internal_sim_dt();
}
inline void Clock::_internal_set_sim_dt(double value) {
  
  sim_dt_ = value;
}
inline void Clock::set_sim_dt(double value) {
  _internal_set_sim_dt(value);
  // @@protoc_insertion_point(field_set:Clock.sim_dt)
}

// double sys_dt = 2;
inline void Clock::clear_sys_dt() {
  sys_dt_ = 0;
}
inline double Clock::_internal_sys_dt() const {
  return sys_dt_;
}
inline double Clock::sys_dt() const {
  // @@protoc_insertion_point(field_get:Clock.sys_dt)
  return _internal_sys_dt();
}
inline void Clock::_internal_set_sys_dt(double value) {
  
  sys_dt_ = value;
}
inline void Clock::set_sys_dt(double value) {
  _internal_set_sys_dt(value);
  // @@protoc_insertion_point(field_set:Clock.sys_dt)
}

// double sim_time = 3;
inline void Clock::clear_sim_time() {
  sim_time_ = 0;
}
inline double Clock::_internal_sim_time() const {
  return sim_time_;
}
inline double Clock::sim_time() const {
  // @@protoc_insertion_point(field_get:Clock.sim_time)
  return _internal_sim_time();
}
inline void Clock::_internal_set_sim_time(double value) {
  
  sim_time_ = value;
}
inline void Clock::set_sim_time(double value) {
  _internal_set_sim_time(value);
  // @@protoc_insertion_point(field_set:Clock.sim_time)
}

// double sys_time = 4;
inline void Clock::clear_sys_time() {
  sys_time_ = 0;
}
inline double Clock::_internal_sys_time() const {
  return sys_time_;
}
inline double Clock::sys_time() const {
  // @@protoc_insertion_point(field_get:Clock.sys_time)
  return _internal_sys_time();
}
inline void Clock::_internal_set_sys_time(double value) {
  
  sys_time_ = value;
}
inline void Clock::set_sys_time(double value) {
  _internal_set_sys_time(value);
  // @@protoc_insertion_point(field_set:Clock.sys_time)
}

// -------------------------------------------------------------------

// Camera

// repeated double view_matrix_ros = 1;
inline int Camera::_internal_view_matrix_ros_size() const {
  return view_matrix_ros_.size();
}
inline int Camera::view_matrix_ros_size() const {
  return _internal_view_matrix_ros_size();
}
inline void Camera::clear_view_matrix_ros() {
  view_matrix_ros_.Clear();
}
inline double Camera::_internal_view_matrix_ros(int index) const {
  return view_matrix_ros_.Get(index);
}
inline double Camera::view_matrix_ros(int index) const {
  // @@protoc_insertion_point(field_get:Camera.view_matrix_ros)
  return _internal_view_matrix_ros(index);
}
inline void Camera::set_view_matrix_ros(int index, double value) {
  view_matrix_ros_.Set(index, value);
  // @@protoc_insertion_point(field_set:Camera.view_matrix_ros)
}
inline void Camera::_internal_add_view_matrix_ros(double value) {
  view_matrix_ros_.Add(value);
}
inline void Camera::add_view_matrix_ros(double value) {
  _internal_add_view_matrix_ros(value);
  // @@protoc_insertion_point(field_add:Camera.view_matrix_ros)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Camera::_internal_view_matrix_ros() const {
  return view_matrix_ros_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Camera::view_matrix_ros() const {
  // @@protoc_insertion_point(field_list:Camera.view_matrix_ros)
  return _internal_view_matrix_ros();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Camera::_internal_mutable_view_matrix_ros() {
  return &view_matrix_ros_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Camera::mutable_view_matrix_ros() {
  // @@protoc_insertion_point(field_mutable_list:Camera.view_matrix_ros)
  return _internal_mutable_view_matrix_ros();
}

// repeated double camera_scale = 2;
inline int Camera::_internal_camera_scale_size() const {
  return camera_scale_.size();
}
inline int Camera::camera_scale_size() const {
  return _internal_camera_scale_size();
}
inline void Camera::clear_camera_scale() {
  camera_scale_.Clear();
}
inline double Camera::_internal_camera_scale(int index) const {
  return camera_scale_.Get(index);
}
inline double Camera::camera_scale(int index) const {
  // @@protoc_insertion_point(field_get:Camera.camera_scale)
  return _internal_camera_scale(index);
}
inline void Camera::set_camera_scale(int index, double value) {
  camera_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:Camera.camera_scale)
}
inline void Camera::_internal_add_camera_scale(double value) {
  camera_scale_.Add(value);
}
inline void Camera::add_camera_scale(double value) {
  _internal_add_camera_scale(value);
  // @@protoc_insertion_point(field_add:Camera.camera_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Camera::_internal_camera_scale() const {
  return camera_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Camera::camera_scale() const {
  // @@protoc_insertion_point(field_list:Camera.camera_scale)
  return _internal_camera_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Camera::_internal_mutable_camera_scale() {
  return &camera_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Camera::mutable_camera_scale() {
  // @@protoc_insertion_point(field_mutable_list:Camera.camera_scale)
  return _internal_mutable_camera_scale();
}

// repeated double intrinsics_matrix = 3;
inline int Camera::_internal_intrinsics_matrix_size() const {
  return intrinsics_matrix_.size();
}
inline int Camera::intrinsics_matrix_size() const {
  return _internal_intrinsics_matrix_size();
}
inline void Camera::clear_intrinsics_matrix() {
  intrinsics_matrix_.Clear();
}
inline double Camera::_internal_intrinsics_matrix(int index) const {
  return intrinsics_matrix_.Get(index);
}
inline double Camera::intrinsics_matrix(int index) const {
  // @@protoc_insertion_point(field_get:Camera.intrinsics_matrix)
  return _internal_intrinsics_matrix(index);
}
inline void Camera::set_intrinsics_matrix(int index, double value) {
  intrinsics_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:Camera.intrinsics_matrix)
}
inline void Camera::_internal_add_intrinsics_matrix(double value) {
  intrinsics_matrix_.Add(value);
}
inline void Camera::add_intrinsics_matrix(double value) {
  _internal_add_intrinsics_matrix(value);
  // @@protoc_insertion_point(field_add:Camera.intrinsics_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Camera::_internal_intrinsics_matrix() const {
  return intrinsics_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Camera::intrinsics_matrix() const {
  // @@protoc_insertion_point(field_list:Camera.intrinsics_matrix)
  return _internal_intrinsics_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Camera::_internal_mutable_intrinsics_matrix() {
  return &intrinsics_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Camera::mutable_intrinsics_matrix() {
  // @@protoc_insertion_point(field_mutable_list:Camera.intrinsics_matrix)
  return _internal_mutable_intrinsics_matrix();
}

// -------------------------------------------------------------------

// ClientStreamMessage

// .BBox2D bbox2d = 1;
inline bool ClientStreamMessage::_internal_has_bbox2d() const {
  return this != internal_default_instance() && bbox2d_ != nullptr;
}
inline bool ClientStreamMessage::has_bbox2d() const {
  return _internal_has_bbox2d();
}
inline void ClientStreamMessage::clear_bbox2d() {
  if (GetArenaForAllocation() == nullptr && bbox2d_ != nullptr) {
    delete bbox2d_;
  }
  bbox2d_ = nullptr;
}
inline const ::BBox2D& ClientStreamMessage::_internal_bbox2d() const {
  const ::BBox2D* p = bbox2d_;
  return p != nullptr ? *p : reinterpret_cast<const ::BBox2D&>(
      ::_BBox2D_default_instance_);
}
inline const ::BBox2D& ClientStreamMessage::bbox2d() const {
  // @@protoc_insertion_point(field_get:ClientStreamMessage.bbox2d)
  return _internal_bbox2d();
}
inline void ClientStreamMessage::unsafe_arena_set_allocated_bbox2d(
    ::BBox2D* bbox2d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox2d_);
  }
  bbox2d_ = bbox2d;
  if (bbox2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientStreamMessage.bbox2d)
}
inline ::BBox2D* ClientStreamMessage::release_bbox2d() {
  
  ::BBox2D* temp = bbox2d_;
  bbox2d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BBox2D* ClientStreamMessage::unsafe_arena_release_bbox2d() {
  // @@protoc_insertion_point(field_release:ClientStreamMessage.bbox2d)
  
  ::BBox2D* temp = bbox2d_;
  bbox2d_ = nullptr;
  return temp;
}
inline ::BBox2D* ClientStreamMessage::_internal_mutable_bbox2d() {
  
  if (bbox2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::BBox2D>(GetArenaForAllocation());
    bbox2d_ = p;
  }
  return bbox2d_;
}
inline ::BBox2D* ClientStreamMessage::mutable_bbox2d() {
  ::BBox2D* _msg = _internal_mutable_bbox2d();
  // @@protoc_insertion_point(field_mutable:ClientStreamMessage.bbox2d)
  return _msg;
}
inline void ClientStreamMessage::set_allocated_bbox2d(::BBox2D* bbox2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bbox2d_;
  }
  if (bbox2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::BBox2D>::GetOwningArena(bbox2d);
    if (message_arena != submessage_arena) {
      bbox2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox2d, submessage_arena);
    }
    
  } else {
    
  }
  bbox2d_ = bbox2d;
  // @@protoc_insertion_point(field_set_allocated:ClientStreamMessage.bbox2d)
}

// .Clock clock = 2;
inline bool ClientStreamMessage::_internal_has_clock() const {
  return this != internal_default_instance() && clock_ != nullptr;
}
inline bool ClientStreamMessage::has_clock() const {
  return _internal_has_clock();
}
inline void ClientStreamMessage::clear_clock() {
  if (GetArenaForAllocation() == nullptr && clock_ != nullptr) {
    delete clock_;
  }
  clock_ = nullptr;
}
inline const ::Clock& ClientStreamMessage::_internal_clock() const {
  const ::Clock* p = clock_;
  return p != nullptr ? *p : reinterpret_cast<const ::Clock&>(
      ::_Clock_default_instance_);
}
inline const ::Clock& ClientStreamMessage::clock() const {
  // @@protoc_insertion_point(field_get:ClientStreamMessage.clock)
  return _internal_clock();
}
inline void ClientStreamMessage::unsafe_arena_set_allocated_clock(
    ::Clock* clock) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_);
  }
  clock_ = clock;
  if (clock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientStreamMessage.clock)
}
inline ::Clock* ClientStreamMessage::release_clock() {
  
  ::Clock* temp = clock_;
  clock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Clock* ClientStreamMessage::unsafe_arena_release_clock() {
  // @@protoc_insertion_point(field_release:ClientStreamMessage.clock)
  
  ::Clock* temp = clock_;
  clock_ = nullptr;
  return temp;
}
inline ::Clock* ClientStreamMessage::_internal_mutable_clock() {
  
  if (clock_ == nullptr) {
    auto* p = CreateMaybeMessage<::Clock>(GetArenaForAllocation());
    clock_ = p;
  }
  return clock_;
}
inline ::Clock* ClientStreamMessage::mutable_clock() {
  ::Clock* _msg = _internal_mutable_clock();
  // @@protoc_insertion_point(field_mutable:ClientStreamMessage.clock)
  return _msg;
}
inline void ClientStreamMessage::set_allocated_clock(::Clock* clock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete clock_;
  }
  if (clock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Clock>::GetOwningArena(clock);
    if (message_arena != submessage_arena) {
      clock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock, submessage_arena);
    }
    
  } else {
    
  }
  clock_ = clock;
  // @@protoc_insertion_point(field_set_allocated:ClientStreamMessage.clock)
}

// .Camera camera = 3;
inline bool ClientStreamMessage::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool ClientStreamMessage::has_camera() const {
  return _internal_has_camera();
}
inline void ClientStreamMessage::clear_camera() {
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::Camera& ClientStreamMessage::_internal_camera() const {
  const ::Camera* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::Camera&>(
      ::_Camera_default_instance_);
}
inline const ::Camera& ClientStreamMessage::camera() const {
  // @@protoc_insertion_point(field_get:ClientStreamMessage.camera)
  return _internal_camera();
}
inline void ClientStreamMessage::unsafe_arena_set_allocated_camera(
    ::Camera* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientStreamMessage.camera)
}
inline ::Camera* ClientStreamMessage::release_camera() {
  
  ::Camera* temp = camera_;
  camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Camera* ClientStreamMessage::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:ClientStreamMessage.camera)
  
  ::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::Camera* ClientStreamMessage::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::Camera>(GetArenaForAllocation());
    camera_ = p;
  }
  return camera_;
}
inline ::Camera* ClientStreamMessage::mutable_camera() {
  ::Camera* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:ClientStreamMessage.camera)
  return _msg;
}
inline void ClientStreamMessage::set_allocated_camera(::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Camera>::GetOwningArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:ClientStreamMessage.camera)
}

// bytes color_image = 4;
inline void ClientStreamMessage::clear_color_image() {
  color_image_.ClearToEmpty();
}
inline const std::string& ClientStreamMessage::color_image() const {
  // @@protoc_insertion_point(field_get:ClientStreamMessage.color_image)
  return _internal_color_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientStreamMessage::set_color_image(ArgT0&& arg0, ArgT... args) {
 
 color_image_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientStreamMessage.color_image)
}
inline std::string* ClientStreamMessage::mutable_color_image() {
  std::string* _s = _internal_mutable_color_image();
  // @@protoc_insertion_point(field_mutable:ClientStreamMessage.color_image)
  return _s;
}
inline const std::string& ClientStreamMessage::_internal_color_image() const {
  return color_image_.Get();
}
inline void ClientStreamMessage::_internal_set_color_image(const std::string& value) {
  
  color_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientStreamMessage::_internal_mutable_color_image() {
  
  return color_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientStreamMessage::release_color_image() {
  // @@protoc_insertion_point(field_release:ClientStreamMessage.color_image)
  return color_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientStreamMessage::set_allocated_color_image(std::string* color_image) {
  if (color_image != nullptr) {
    
  } else {
    
  }
  color_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_image,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientStreamMessage.color_image)
}

// bytes depth_image = 5;
inline void ClientStreamMessage::clear_depth_image() {
  depth_image_.ClearToEmpty();
}
inline const std::string& ClientStreamMessage::depth_image() const {
  // @@protoc_insertion_point(field_get:ClientStreamMessage.depth_image)
  return _internal_depth_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientStreamMessage::set_depth_image(ArgT0&& arg0, ArgT... args) {
 
 depth_image_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientStreamMessage.depth_image)
}
inline std::string* ClientStreamMessage::mutable_depth_image() {
  std::string* _s = _internal_mutable_depth_image();
  // @@protoc_insertion_point(field_mutable:ClientStreamMessage.depth_image)
  return _s;
}
inline const std::string& ClientStreamMessage::_internal_depth_image() const {
  return depth_image_.Get();
}
inline void ClientStreamMessage::_internal_set_depth_image(const std::string& value) {
  
  depth_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientStreamMessage::_internal_mutable_depth_image() {
  
  return depth_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientStreamMessage::release_depth_image() {
  // @@protoc_insertion_point(field_release:ClientStreamMessage.depth_image)
  return depth_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientStreamMessage::set_allocated_depth_image(std::string* depth_image) {
  if (depth_image != nullptr) {
    
  } else {
    
  }
  depth_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depth_image,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (depth_image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    depth_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientStreamMessage.depth_image)
}

// -------------------------------------------------------------------

// G1ClientStreamMessage

// .BBox2D bbox2d = 1;
inline bool G1ClientStreamMessage::_internal_has_bbox2d() const {
  return this != internal_default_instance() && bbox2d_ != nullptr;
}
inline bool G1ClientStreamMessage::has_bbox2d() const {
  return _internal_has_bbox2d();
}
inline void G1ClientStreamMessage::clear_bbox2d() {
  if (GetArenaForAllocation() == nullptr && bbox2d_ != nullptr) {
    delete bbox2d_;
  }
  bbox2d_ = nullptr;
}
inline const ::BBox2D& G1ClientStreamMessage::_internal_bbox2d() const {
  const ::BBox2D* p = bbox2d_;
  return p != nullptr ? *p : reinterpret_cast<const ::BBox2D&>(
      ::_BBox2D_default_instance_);
}
inline const ::BBox2D& G1ClientStreamMessage::bbox2d() const {
  // @@protoc_insertion_point(field_get:G1ClientStreamMessage.bbox2d)
  return _internal_bbox2d();
}
inline void G1ClientStreamMessage::unsafe_arena_set_allocated_bbox2d(
    ::BBox2D* bbox2d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox2d_);
  }
  bbox2d_ = bbox2d;
  if (bbox2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1ClientStreamMessage.bbox2d)
}
inline ::BBox2D* G1ClientStreamMessage::release_bbox2d() {
  
  ::BBox2D* temp = bbox2d_;
  bbox2d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BBox2D* G1ClientStreamMessage::unsafe_arena_release_bbox2d() {
  // @@protoc_insertion_point(field_release:G1ClientStreamMessage.bbox2d)
  
  ::BBox2D* temp = bbox2d_;
  bbox2d_ = nullptr;
  return temp;
}
inline ::BBox2D* G1ClientStreamMessage::_internal_mutable_bbox2d() {
  
  if (bbox2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::BBox2D>(GetArenaForAllocation());
    bbox2d_ = p;
  }
  return bbox2d_;
}
inline ::BBox2D* G1ClientStreamMessage::mutable_bbox2d() {
  ::BBox2D* _msg = _internal_mutable_bbox2d();
  // @@protoc_insertion_point(field_mutable:G1ClientStreamMessage.bbox2d)
  return _msg;
}
inline void G1ClientStreamMessage::set_allocated_bbox2d(::BBox2D* bbox2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bbox2d_;
  }
  if (bbox2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::BBox2D>::GetOwningArena(bbox2d);
    if (message_arena != submessage_arena) {
      bbox2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox2d, submessage_arena);
    }
    
  } else {
    
  }
  bbox2d_ = bbox2d;
  // @@protoc_insertion_point(field_set_allocated:G1ClientStreamMessage.bbox2d)
}

// .Clock clock = 2;
inline bool G1ClientStreamMessage::_internal_has_clock() const {
  return this != internal_default_instance() && clock_ != nullptr;
}
inline bool G1ClientStreamMessage::has_clock() const {
  return _internal_has_clock();
}
inline void G1ClientStreamMessage::clear_clock() {
  if (GetArenaForAllocation() == nullptr && clock_ != nullptr) {
    delete clock_;
  }
  clock_ = nullptr;
}
inline const ::Clock& G1ClientStreamMessage::_internal_clock() const {
  const ::Clock* p = clock_;
  return p != nullptr ? *p : reinterpret_cast<const ::Clock&>(
      ::_Clock_default_instance_);
}
inline const ::Clock& G1ClientStreamMessage::clock() const {
  // @@protoc_insertion_point(field_get:G1ClientStreamMessage.clock)
  return _internal_clock();
}
inline void G1ClientStreamMessage::unsafe_arena_set_allocated_clock(
    ::Clock* clock) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_);
  }
  clock_ = clock;
  if (clock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1ClientStreamMessage.clock)
}
inline ::Clock* G1ClientStreamMessage::release_clock() {
  
  ::Clock* temp = clock_;
  clock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Clock* G1ClientStreamMessage::unsafe_arena_release_clock() {
  // @@protoc_insertion_point(field_release:G1ClientStreamMessage.clock)
  
  ::Clock* temp = clock_;
  clock_ = nullptr;
  return temp;
}
inline ::Clock* G1ClientStreamMessage::_internal_mutable_clock() {
  
  if (clock_ == nullptr) {
    auto* p = CreateMaybeMessage<::Clock>(GetArenaForAllocation());
    clock_ = p;
  }
  return clock_;
}
inline ::Clock* G1ClientStreamMessage::mutable_clock() {
  ::Clock* _msg = _internal_mutable_clock();
  // @@protoc_insertion_point(field_mutable:G1ClientStreamMessage.clock)
  return _msg;
}
inline void G1ClientStreamMessage::set_allocated_clock(::Clock* clock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete clock_;
  }
  if (clock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Clock>::GetOwningArena(clock);
    if (message_arena != submessage_arena) {
      clock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock, submessage_arena);
    }
    
  } else {
    
  }
  clock_ = clock;
  // @@protoc_insertion_point(field_set_allocated:G1ClientStreamMessage.clock)
}

// .Camera camera = 3;
inline bool G1ClientStreamMessage::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool G1ClientStreamMessage::has_camera() const {
  return _internal_has_camera();
}
inline void G1ClientStreamMessage::clear_camera() {
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::Camera& G1ClientStreamMessage::_internal_camera() const {
  const ::Camera* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::Camera&>(
      ::_Camera_default_instance_);
}
inline const ::Camera& G1ClientStreamMessage::camera() const {
  // @@protoc_insertion_point(field_get:G1ClientStreamMessage.camera)
  return _internal_camera();
}
inline void G1ClientStreamMessage::unsafe_arena_set_allocated_camera(
    ::Camera* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1ClientStreamMessage.camera)
}
inline ::Camera* G1ClientStreamMessage::release_camera() {
  
  ::Camera* temp = camera_;
  camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Camera* G1ClientStreamMessage::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:G1ClientStreamMessage.camera)
  
  ::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::Camera* G1ClientStreamMessage::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::Camera>(GetArenaForAllocation());
    camera_ = p;
  }
  return camera_;
}
inline ::Camera* G1ClientStreamMessage::mutable_camera() {
  ::Camera* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:G1ClientStreamMessage.camera)
  return _msg;
}
inline void G1ClientStreamMessage::set_allocated_camera(::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Camera>::GetOwningArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:G1ClientStreamMessage.camera)
}

// bytes color_image = 4;
inline void G1ClientStreamMessage::clear_color_image() {
  color_image_.ClearToEmpty();
}
inline const std::string& G1ClientStreamMessage::color_image() const {
  // @@protoc_insertion_point(field_get:G1ClientStreamMessage.color_image)
  return _internal_color_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void G1ClientStreamMessage::set_color_image(ArgT0&& arg0, ArgT... args) {
 
 color_image_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:G1ClientStreamMessage.color_image)
}
inline std::string* G1ClientStreamMessage::mutable_color_image() {
  std::string* _s = _internal_mutable_color_image();
  // @@protoc_insertion_point(field_mutable:G1ClientStreamMessage.color_image)
  return _s;
}
inline const std::string& G1ClientStreamMessage::_internal_color_image() const {
  return color_image_.Get();
}
inline void G1ClientStreamMessage::_internal_set_color_image(const std::string& value) {
  
  color_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* G1ClientStreamMessage::_internal_mutable_color_image() {
  
  return color_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* G1ClientStreamMessage::release_color_image() {
  // @@protoc_insertion_point(field_release:G1ClientStreamMessage.color_image)
  return color_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void G1ClientStreamMessage::set_allocated_color_image(std::string* color_image) {
  if (color_image != nullptr) {
    
  } else {
    
  }
  color_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_image,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:G1ClientStreamMessage.color_image)
}

// bytes depth_image = 5;
inline void G1ClientStreamMessage::clear_depth_image() {
  depth_image_.ClearToEmpty();
}
inline const std::string& G1ClientStreamMessage::depth_image() const {
  // @@protoc_insertion_point(field_get:G1ClientStreamMessage.depth_image)
  return _internal_depth_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void G1ClientStreamMessage::set_depth_image(ArgT0&& arg0, ArgT... args) {
 
 depth_image_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:G1ClientStreamMessage.depth_image)
}
inline std::string* G1ClientStreamMessage::mutable_depth_image() {
  std::string* _s = _internal_mutable_depth_image();
  // @@protoc_insertion_point(field_mutable:G1ClientStreamMessage.depth_image)
  return _s;
}
inline const std::string& G1ClientStreamMessage::_internal_depth_image() const {
  return depth_image_.Get();
}
inline void G1ClientStreamMessage::_internal_set_depth_image(const std::string& value) {
  
  depth_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* G1ClientStreamMessage::_internal_mutable_depth_image() {
  
  return depth_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* G1ClientStreamMessage::release_depth_image() {
  // @@protoc_insertion_point(field_release:G1ClientStreamMessage.depth_image)
  return depth_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void G1ClientStreamMessage::set_allocated_depth_image(std::string* depth_image) {
  if (depth_image != nullptr) {
    
  } else {
    
  }
  depth_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depth_image,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (depth_image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    depth_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:G1ClientStreamMessage.depth_image)
}

// .G1JoinState join_state = 6;
inline bool G1ClientStreamMessage::_internal_has_join_state() const {
  return this != internal_default_instance() && join_state_ != nullptr;
}
inline bool G1ClientStreamMessage::has_join_state() const {
  return _internal_has_join_state();
}
inline void G1ClientStreamMessage::clear_join_state() {
  if (GetArenaForAllocation() == nullptr && join_state_ != nullptr) {
    delete join_state_;
  }
  join_state_ = nullptr;
}
inline const ::G1JoinState& G1ClientStreamMessage::_internal_join_state() const {
  const ::G1JoinState* p = join_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::G1JoinState&>(
      ::_G1JoinState_default_instance_);
}
inline const ::G1JoinState& G1ClientStreamMessage::join_state() const {
  // @@protoc_insertion_point(field_get:G1ClientStreamMessage.join_state)
  return _internal_join_state();
}
inline void G1ClientStreamMessage::unsafe_arena_set_allocated_join_state(
    ::G1JoinState* join_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_state_);
  }
  join_state_ = join_state;
  if (join_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:G1ClientStreamMessage.join_state)
}
inline ::G1JoinState* G1ClientStreamMessage::release_join_state() {
  
  ::G1JoinState* temp = join_state_;
  join_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::G1JoinState* G1ClientStreamMessage::unsafe_arena_release_join_state() {
  // @@protoc_insertion_point(field_release:G1ClientStreamMessage.join_state)
  
  ::G1JoinState* temp = join_state_;
  join_state_ = nullptr;
  return temp;
}
inline ::G1JoinState* G1ClientStreamMessage::_internal_mutable_join_state() {
  
  if (join_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::G1JoinState>(GetArenaForAllocation());
    join_state_ = p;
  }
  return join_state_;
}
inline ::G1JoinState* G1ClientStreamMessage::mutable_join_state() {
  ::G1JoinState* _msg = _internal_mutable_join_state();
  // @@protoc_insertion_point(field_mutable:G1ClientStreamMessage.join_state)
  return _msg;
}
inline void G1ClientStreamMessage::set_allocated_join_state(::G1JoinState* join_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete join_state_;
  }
  if (join_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::G1JoinState>::GetOwningArena(join_state);
    if (message_arena != submessage_arena) {
      join_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_state, submessage_arena);
    }
    
  } else {
    
  }
  join_state_ = join_state;
  // @@protoc_insertion_point(field_set_allocated:G1ClientStreamMessage.join_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fstream_5fmessage_2eproto
